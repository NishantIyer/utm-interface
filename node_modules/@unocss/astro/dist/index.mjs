import { resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import VitePlugin from '@unocss/vite';

const UNO_INJECT_ID = "uno-astro";
const UNO_QUERY_KEY = "uno-with-astro-key";
function AstroVitePlugin(options) {
  const { injects } = options;
  let config;
  return {
    name: "unocss:astro",
    enforce: "pre",
    configResolved(_config) {
      config = _config;
    },
    async resolveId(id, importer) {
      if (id === UNO_INJECT_ID)
        return id;
      if (importer?.endsWith(UNO_INJECT_ID) && config && config.command === "serve") {
        const resolved = await this.resolve(id, importer, { skipSelf: true });
        if (resolved) {
          const fsPath = resolved.id;
          return `${fsPath}${fsPath.includes("?") ? "&" : "?"}${UNO_QUERY_KEY}`;
        }
      }
    },
    load(id, options2) {
      if (id.endsWith(UNO_INJECT_ID))
        return injects.join("\n");
      if (!options2?.ssr && id.includes(UNO_QUERY_KEY) && id.includes(".css"))
        return null;
    }
  };
}
function UnoCSSAstroIntegration(options = {}, defaults) {
  const {
    injectEntry = true,
    injectReset = false,
    injectExtra = []
  } = options;
  return {
    name: "unocss",
    hooks: {
      "astro:config:setup": async ({ config, updateConfig, injectScript }) => {
        var _a;
        const source = resolve(fileURLToPath(config.srcDir), "components/**/*").replace(/\\/g, "/");
        options.content || (options.content = {});
        (_a = options.content).filesystem || (_a.filesystem = []);
        options.content.filesystem.push(source);
        const injects = [];
        if (injectReset) {
          const resetPath = typeof injectReset === "string" ? injectReset : "@unocss/reset/tailwind.css";
          injects.push(`import "${resetPath}"`);
        }
        if (injectEntry) {
          injects.push(typeof injectEntry === "string" ? injectEntry : 'import "uno.css"');
        }
        if (injectExtra.length > 0)
          injects.push(...injectExtra);
        updateConfig({
          vite: {
            plugins: [AstroVitePlugin({
              injects
            }), ...VitePlugin(options, defaults)]
          }
        });
        if (injects?.length)
          injectScript("page-ssr", `import ${JSON.stringify(UNO_INJECT_ID)}`);
      }
    }
  };
}

export { UnoCSSAstroIntegration as default };
