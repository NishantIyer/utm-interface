// src/index.ts
import { createRequire } from "node:module";
import { createSyncFn } from "synckit";
function getThemeName(theme) {
  if (typeof theme === "string")
    return theme;
  return theme.name;
}
var RE = /{([\d,-]+)}/;
function resolveOptions(options) {
  const themes = [];
  let darkModeThemes;
  if (!options.theme) {
    themes.push("nord");
  } else if (typeof options.theme === "string") {
    themes.push(options.theme);
  } else {
    if ("dark" in options.theme || "light" in options.theme) {
      darkModeThemes = options.theme;
      themes.push(darkModeThemes.dark);
      themes.push(darkModeThemes.light);
    } else {
      themes.push(options.theme);
    }
  }
  return {
    ...options,
    themes,
    darkModeThemes: darkModeThemes ? {
      dark: getThemeName(darkModeThemes.dark),
      light: getThemeName(darkModeThemes.light)
    } : void 0
  };
}
function attrsToLines(attrs) {
  const result = [];
  if (!attrs.trim())
    return [];
  attrs.split(",").map((v) => v.split("-").map((v2) => parseInt(v2, 10))).forEach(([start, end]) => {
    if (start && end) {
      result.push(
        ...Array.from({ length: end - start + 1 }, (_, i) => start + i)
      );
    } else {
      result.push(start);
    }
  });
  return result.map((v) => ({
    line: v,
    classes: ["highlighted"]
  }));
}
var MarkdownItShiki = (markdownit, options = {}) => {
  const _highlighter = options.highlighter;
  const {
    langs,
    themes,
    darkModeThemes,
    highlightLines
  } = resolveOptions(options);
  let syncRun;
  if (!_highlighter) {
    const require2 = createRequire(import.meta.url);
    syncRun = createSyncFn(require2.resolve("./worker"));
    syncRun("getHighlighter", { langs, themes });
  }
  const highlightCode = (code, lang, theme, lineOptions) => {
    if (_highlighter)
      return _highlighter.codeToHtml(code, { lang: lang || "text", theme, lineOptions });
    return syncRun("codeToHtml", {
      code,
      theme,
      lang: lang || "text",
      lineOptions
    });
  };
  markdownit.options.highlight = (code, lang = "text", attrs) => {
    let lineOptions;
    if (highlightLines) {
      const match = RE.exec(attrs);
      if (match)
        lineOptions = attrsToLines(match[1]);
    }
    if (darkModeThemes) {
      const dark = highlightCode(code, lang, darkModeThemes.dark, lineOptions).replace('<pre class="shiki ', '<pre class="shiki shiki-dark ');
      const light = highlightCode(code, lang, darkModeThemes.light, lineOptions).replace('<pre class="shiki ', '<pre class="shiki shiki-light ');
      return `<pre hidden></pre><div class="shiki-container language-${lang}">${dark}${light}</div>`;
    } else {
      return highlightCode(
        code,
        lang,
        void 0,
        lineOptions
      ).replace("<code>", `<code class="language-${lang}">`);
    }
  };
};
var src_default = MarkdownItShiki;
export {
  src_default as default,
  resolveOptions
};
